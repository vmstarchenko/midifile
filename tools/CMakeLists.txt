add_executable(80off 80off.cpp)
add_executable(asciimidi asciimidi.cpp)
add_executable(binasc binasc.cpp)
add_executable(createmidifile createmidifile.cpp)
add_executable(createmidifile2 createmidifile2.cpp)
add_executable(drumtab drumtab.cpp)
add_executable(durations durations.cpp)
add_executable(mid2mat mid2mat.cpp)
add_executable(mid2mtb mid2mtb.cpp)
add_executable(mid2svg mid2svg.cpp)
add_executable(midi2binasc midi2binasc.cpp)
add_executable(midi2melody midi2melody.cpp)
add_executable(midi2notes midi2notes.cpp)
add_executable(midi2skini midi2skini.cpp)
add_executable(midi2text midi2text.cpp)
add_executable(midicat midicat.cpp)
add_executable(midimixup midimixup.cpp)
add_executable(miditime miditime.cpp)
add_executable(perfid perfid.cpp)
add_executable(retick retick.cpp)
add_executable(shutak shutak.cpp)
add_executable(smfdur smfdur.cpp)
add_executable(stretch stretch.cpp)
add_executable(sysextest sysextest.cpp)
add_executable(text2midi text2midi.cpp)
add_executable(textmidi textmidi.cpp)
add_executable(toascii toascii.cpp)
add_executable(tobin tobin.cpp)
add_executable(tobinary tobinary.cpp)
add_executable(todec todec.cpp)
add_executable(tohex tohex.cpp)
add_executable(type0 type0.cpp)
add_executable(vlv vlv.cpp)
# add_executable(midicheck midicheck.cpp)

# target_compile_features(midicheck PRIVATE cxx_std_17)

target_link_libraries(80off midifile)
target_link_libraries(asciimidi midifile)
target_link_libraries(binasc midifile)
target_link_libraries(createmidifile midifile)
target_link_libraries(createmidifile2 midifile)
target_link_libraries(drumtab midifile)
target_link_libraries(durations midifile)
target_link_libraries(mid2mat midifile)
target_link_libraries(mid2mtb midifile)
target_link_libraries(mid2svg midifile)
target_link_libraries(midi2binasc midifile)
target_link_libraries(midi2melody midifile)
target_link_libraries(midi2notes midifile)
target_link_libraries(midi2skini midifile)
target_link_libraries(midi2text midifile)
target_link_libraries(midicat midifile)
target_link_libraries(midimixup midifile)
target_link_libraries(miditime midifile)
target_link_libraries(perfid midifile)
target_link_libraries(retick midifile)
target_link_libraries(shutak midifile)
target_link_libraries(smfdur midifile)
target_link_libraries(stretch midifile)
target_link_libraries(sysextest midifile)
target_link_libraries(text2midi midifile)
target_link_libraries(textmidi midifile)
target_link_libraries(toascii midifile)
target_link_libraries(tobin midifile)
target_link_libraries(tobinary midifile)
target_link_libraries(todec midifile)
target_link_libraries(tohex midifile)
target_link_libraries(type0 midifile)
target_link_libraries(vlv midifile)
# target_link_libraries(midicheck midifile tbb)

# set(THREADS_PREFER_PTHREAD_FLAG ON)
# find_package(Threads REQUIRED)
# target_link_libraries(midicheck Threads::Threads)
# TARGET_LINK_LIBRARIES(midicheck LINK_PUBLIC ${Boost_LIBRARIES} )

if(HAVE_UNISTD_H AND HAVE_SYS_IO_H)
    add_executable(midi2beep midi2beep.cpp)

    target_link_libraries(midi2beep midifile)
endif()

# The following programs require headers from humextra repository.
# <https://github.com/humdrum-tools/humextra>
if(HAVE_HUMDRUM_H)
    add_executable(henonfile henonfile.cpp)
    add_executable(mid2hum mid2hum.cpp)
    add_executable(midiexcerpt midiexcerpt.cpp)
    add_executable(peep2midi peep2midi.cpp)

    target_link_libraries(henonfile midifile)
    target_link_libraries(mid2hum midifile)
    target_link_libraries(midiexcerpt midifile)
    target_link_libraries(peep2midi midifile)
endif()
